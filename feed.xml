<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhiheng's Blog</title>
    <description>商业Blog的广告看着太烦了，不过还没搞清楚Jekyll的高级用法。先把技术博客发了再慢慢研究&gt;_&lt;~
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 28 Oct 2014 23:05:11 +0800</pubDate>
    <lastBuildDate>Tue, 28 Oct 2014 23:05:11 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>软件工程技术博客NO.1——PHP初步</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;在这个前期准备的阶段，我分配到的任务是学习php（其实是自己要求的）。
由于我正好需要给一个学长帮忙做网站的一些后台程序，恰好需要学习php，于是就可以边学边干活啦（有点坑学长）。
之前学长的后台是用python实现的，但是考虑到python学习成本比php要高，而且中文资料也更丰富，因此我还是推荐选择php作为后台。&lt;/p&gt;

&lt;p&gt;由于PHP是一门非常类似C的语言，所以学习语法的成本很低，我的主要精力都放在了PHP在Web端的交互上。
最后也做出了一个DEMO，算是把PHP基本的交互成功实现了。接下来就对PHP进行一下简单的介绍，并且放出DEMO。&lt;/p&gt;

&lt;h1 id=&quot;php&quot;&gt;PHP学习&lt;/h1&gt;

&lt;p&gt;对php的初步学习大概分为几个部分，老规矩先给出列表。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;php安装&lt;/li&gt;
  &lt;li&gt;php基本语法&lt;/li&gt;
  &lt;li&gt;php交互&lt;/li&gt;
  &lt;li&gt;第一个DEMO&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;php-1&quot;&gt;php安装&lt;/h4&gt;

&lt;p&gt;像我这种懒人如果有Ubunut的apt软件源，是绝对不会用make安装软件包的，因此php的安装就是一行命令的问题。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;sudo apt-get install php5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;于是这样php的安装就完成了，接下来就可以写出第一个程序进行测试了。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;保存为hello.php，在shell中输入&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;php -f hello.php&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;显示&lt;code&gt;Hello world!&lt;/code&gt;，说明php已经成功安装。至于更高级的配置，现在还不急（其实是懒得搞）。&lt;/p&gt;

&lt;h4 id=&quot;php-2&quot;&gt;php基本语法&lt;/h4&gt;

&lt;p&gt;php最初的设计就是用来编写Web端程序的，因此php的脚本是在服务器上执行的，一段php代码最终返回的是HTML代码。
下面是一段完整的代码示例（摘自w3school)。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;我的第一张 PHP 页面&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;echo &amp;quot;Hello World!&amp;quot;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;  

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;php的代码都用&lt;code&gt;&amp;lt;?php .. ?&amp;gt;&lt;/code&gt;包含起来，字符串用双引号表示，每条语句结尾用分号结束，这是在这个例子中最基本的php语法。
实际上前面说过php的语法和C是非常类似的，我学习的时候基本把语法部分都跳过去了。
接下来着重说一下php语法和C的不同之处。&lt;/p&gt;

&lt;p&gt;最大的不同之处在于php的变量，php的变量是以$符号开头的，这一点在刚开始写php程序的时候经常会被忽略。
除了$符号，其余的规则和C一致，这里就不专门贴出示例的代码了。
并且php是一门弱类型语言，也就是说里面的变量都是不需要定义数据类型的，这一点和大多数脚本语言一致。&lt;/p&gt;

&lt;p&gt;php中的函数定义也和C语言略有不同，函数的定义语法如下&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;functionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*Code*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;同样，php函数也不会显式定义返回值的类型。&lt;/p&gt;

&lt;p&gt;php的数组功能也比较强大，除了和C语言一样的用下标访问数组，还支持索引数组，即用字符串做下标访问。
具体的使用细节会在后面的DEMO中给出，这里就不贴出代码了。&lt;/p&gt;

&lt;h4 id=&quot;php-3&quot;&gt;php交互&lt;/h4&gt;

&lt;p&gt;php处理前端表单的提交可以说是非常简单，前端提交的表单可以直接通过&lt;code&gt;$_GET&lt;/code&gt;和&lt;code&gt;$_POST&lt;/code&gt;变量获得前端提交表单的数据。
具体的使用方法可以在DEMO中看到。&lt;/p&gt;

&lt;p&gt;至于php和数据库的交互，目前还没有学习，这方面的学习留到下一阶段。&lt;/p&gt;

&lt;h1 id=&quot;demo&quot;&gt;第一个DEMO&lt;/h1&gt;

&lt;p&gt;学习php后第一个DEMO是做了一个围棋水平评测的程序，这个程序我部署在了自己的电脑上，
可以&lt;a href=&quot;http://59.66.137.75/level/&quot; title=&quot;没事你看这个干什么呢&amp;gt;_&amp;lt;~&quot;&gt;简单试用一下&lt;/a&gt;。
由于做服务器的电脑是那台电池坏了的，因此每天断电的时间是不能访问的。
并且由于现在用的是动态IP，所以给出的地址很可能失效，能不能上去就看人品啦&amp;gt;_&amp;lt;~。&lt;/p&gt;

&lt;p&gt;这里主要贴一下php和前端交互的代码，并对一些细节进行一下讲解。&lt;/p&gt;

&lt;p&gt;index.php中的javascript代码：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Send post request to php code&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;./level.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;level&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curlevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Start&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start_level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curlevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#start_level&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#main&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;display&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;block&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#number&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;probnumber&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#level&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;problevel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;probtype&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Important!&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;level.php中的部分php代码：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LevelEvaluation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;intval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;level&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; 
	           &lt;span class=&quot;nb&quot;&gt;intval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Important!&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNextProb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Important!&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Return JSON to javascript code&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里面数据在前后端的传输十分清楚，也就不用赘述了。
这个DEMO中还有很多和class有关的知识，因为我也没仔细研究class，因此留到下回分解啦。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;这次的php学习总体来说还是比较顺利的，语法方面没有遇到什么问题，交互的地方看w3school基本就学明白了。
而且网上php的资料非常多（特别是中文的），这也减少了很多学习的压力。
最后做出的这个DEMO还是可以用的，学长那边测试了一下基本没什么问题。&lt;/p&gt;

&lt;p&gt;更多php的高级功能，以及和数据库的交互，就等这周继续学习了。
总体上说对整个开发还是很有信心的。O(∩_∩)O。&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Oct 2014 21:34:30 +0800</pubDate>
        <link>http://yourdomain.com/secourse/php/2014/10/28/se-report-php-1.html</link>
        <guid isPermaLink="true">http://yourdomain.com/secourse/php/2014/10/28/se-report-php-1.html</guid>
        
        
        <category>secourse</category>
        
        <category>php</category>
        
      </item>
    
      <item>
        <title>软工课程技术博客NO.0——自我介绍</title>
        <description>&lt;p&gt;（自我介绍什么的真的会有人看嘛）&lt;/p&gt;

&lt;p&gt;我叫赵志恒，性别男，性格比较内向，但是别人给我的评价是一对一交流能力很强，学习能力也比较强。不过缺点是比较懒，工作的时候容易被其他事情吸引注意力。比如这篇博客其实是22:34创建的，但是由于和室友聊天，直到22:57才写到这里。我的Jekyll和Git版本库都放在旧电脑上，旧电脑电池又坏了，结果断电了之后没办法用Jekyll了，后面的都是我用HTML写的。&lt;/p&gt;

&lt;p&gt;从编程技术上说，我对C、C++、C#、Javascript、php等语言都比较熟悉，而且学习能力很强，短时间内可以学会一门新的语言。而且编程风格自我感觉还是非常不错，写出的代码可读性较强、易于修改和扩展。不过在其他的技术上，比如各种平台的部署，是我的弱项，看到繁杂的配置文件就感到头疼。这次尝试使用jekyll写静态博客也遇到了同样的问题，对于markdown我学习的就很快速，但是对于jekyll的配置我就是一头雾水。&lt;/p&gt;

&lt;p&gt;在这次的微信应用开发中，我主要负责制定团队的编程规范，以及管理团队的项目版本库，审查代码的质量。这些也是我比较擅长而且比较愿意去做的。在团队开发中，代码的规范和项目的开发效率有着直接的关系。因此良好的代码规范是十分有必要的。但是由于每个人编程习惯和理念的不同，想做到完全统一是根本不可能的，这时候就沟通就显得尤为重要，求同存异才是团队和谐开发的根本。希望这学期能够开发出一个令自己满意的软件，同时留下一段美好的回忆。&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Oct 2014 22:34:30 +0800</pubDate>
        <link>http://yourdomain.com/secourse/2014/10/12/se-proposal.html</link>
        <guid isPermaLink="true">http://yourdomain.com/secourse/2014/10/12/se-proposal.html</guid>
        
        
        <category>secourse</category>
        
      </item>
    
      <item>
        <title>在Ubuntu下的Popush配置——赵志恒</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;这次配置Ubuntu环境下的Popush，在一个非常诡异的问题上卡了两天。最后问题的解决也非常戏剧性。这里留下一个悬念，先讲一下正经的配置过程。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;环境配置&lt;/h1&gt;

&lt;p&gt;先列一下最后配置好的环境：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu 14.04 LTS 32-bit&lt;/li&gt;
  &lt;li&gt;Nginx 1.5.5&lt;/li&gt;
  &lt;li&gt;Mongo DB 2.2.6&lt;/li&gt;
  &lt;li&gt;Node.js 0.10.18&lt;/li&gt;
  &lt;li&gt;gcc 4.8.2&lt;/li&gt;
  &lt;li&gt;gdb 7.7&lt;/li&gt;
  &lt;li&gt;Java 1.7.0_65&lt;/li&gt;
  &lt;li&gt;Python 2.7.6&lt;/li&gt;
  &lt;li&gt;Perl 5.18.2&lt;/li&gt;
  &lt;li&gt;Ruby 1.9.3&lt;/li&gt;
  &lt;li&gt;Lua 5.2.3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在Ubuntu下，大致有两种常用的安装软件的方式，一种是传统Linux的Makefile安装，另一种是Ubuntu的apt-get命令安装，其中apt-get的几种常用命令如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;apt-get update&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;apt-get install packagename&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;apt-get remove packagename&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;与Makefile相比，apt-get基本一条命令就可以自动安装，并且自动设置好PATH变量等信息，在安装Java时这个优势尤为明显。因此除了一些需要特殊配置的软件外，都采用apt-get方式安装。&lt;/p&gt;

&lt;p&gt;接下来按照上面的顺序介绍每个软件具体的安装。&lt;/p&gt;

&lt;h4 id=&quot;ubuntu-1404-lts-32-bit&quot;&gt;Ubuntu 14.04 LTS 32-bit&lt;/h4&gt;

&lt;p&gt;这个没什么可说的，网上有大量安装方法。我这里是直接用安装在了旧电脑的硬盘上，这样速度会比用虚拟机或者wubi更快一些。&lt;/p&gt;

&lt;h4 id=&quot;nginx-155&quot;&gt;Nginx 1.5.5&lt;/h4&gt;

&lt;p&gt;因为直接apt-get的版本比较旧，Nginx我采用的是源代码Makefile安装。Nginx的安装有两个依赖的模块：Zlib和PCRE。其中Zlib在Ubuntu的软件源中没有，因此需要下载源码安装。PCRE可以直接用apt-get安装，命令如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;sudo apt-get install libpcre3 libpcre3-dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;之后直接在Nginx源码目录下输入以下命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;./configure&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sudo make install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;即可完成Nginx的安装。安装完成后输入&lt;code&gt;nginx -v&lt;/code&gt;，出现版本信息即为安装成功。&lt;/p&gt;

&lt;h4 id=&quot;mongo-db-226&quot;&gt;Mongo DB 2.2.6&lt;/h4&gt;

&lt;p&gt;最开始我采用的是宫大汉学长配置文档中的下载编译后的文件安装方法，但是配置过程比较麻烦。后来出现了一些意外之后我需要重装Mongo DB，但是又不想再重复很麻烦的过程，于是找到了另一组学长（学姐）使用apt-get安装的方法，按照上面的步骤很轻松就配置好了Mongo DB。这里不再当搬运工了，直接贴出学长（学姐）的&lt;a href=&quot;http://blog.sina.com.cn/s/blog_d83eec560101fm6m.html&quot; title=&quot;没事你看这个干什么呢&amp;gt;_&amp;lt;~&quot;&gt;Blog地址&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;nodejs-01018&quot;&gt;Node.js 0.10.18&lt;/h4&gt;

&lt;p&gt;这个apt-get安装起来有点麻烦，直接下载源代码安装。刚开始安装的0.10.32好像还是有npm的问题，于是又换回了0.10.18。安装后输入&lt;code&gt;node -v&lt;/code&gt;，出现版本信息即为安装成功。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;其他语言环境&lt;/h4&gt;

&lt;p&gt;其他的语言环境可以完全用apt-get自动安装，其中gdb应该会和gcc一起安装，如果没有的话再单独安装一下就可以。Python和Perl是系统自带，无需安装。下面将安装的命令一起写出来。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;sudo apt-get install g++&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sudo apt-get install openjdk-7-jdk&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sudo apt-get install ruby&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sudo apt-get install lua5.2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;安装之后输入以下命令查看各个语言环境的版本。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;gcc -v&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;gdb -v&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;java -version&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ruby -v&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;lua -v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样安装完成后除了python其他语言支持应该都没有问题了（如果用Makefile安装Java和Ruby可能会出问题）。Python问题的解决方法如下，在命令行中输入&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;sudo gedit /etc/apparmor.d/abstractions/python&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;打开配置文件，在当中添加一行&lt;code&gt;/etc/passwd r,&lt;/code&gt;即可。&lt;/p&gt;

&lt;h1 id=&quot;popush&quot;&gt;Popush部署&lt;/h1&gt;

&lt;p&gt;设项目文件夹的路径为&lt;code&gt;popush_path&lt;/code&gt;，在命令行中依次输入以下命令，完成Popush的配置。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;sudo cp -r popush_path /popush&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sudo chmod -R 777 /popush&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;cd /popush&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sudo make deploy&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sudo chmod -R 777 /etc/init.d/popush&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;之后输入&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;sudo service popush start&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sudo service nginx start&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;打开浏览器，输入&lt;code&gt;localhost&lt;/code&gt;，即可看到Popush界面&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;正文&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;接下来才是本文的重点&lt;/em&gt;，如果按照上面的步骤，配置顺利的话算上下载软件包的时间，最多2个小时就可以开心地Coding了。但是这个Popush却花费了我两天的时间。按照配置文档配置完之后注册登录都可以正常使用，但是创建文件后打开文件就出现内部错误，最郁闷的是这个出错还没有任何的提示信息。于是我先考虑是不是Nginx和Mongo DB的版本问题。于是把Nginx从1.7.6退到1.6.2退到1.6.0，最后退到1.5.5，还是没能解决问题。把Mongo DB退到了2.2.6，也没能解决问题。想完全删了重头来过，发现很多东西都删不干净。最后把相关的文件都删掉，打开浏览器还是能出现Popush的界面。&lt;/p&gt;

&lt;p&gt;这时候已经快迎来新的一天了，于是我借了组长的干净的Ubuntu重新尝试，一边在他的电脑上安装一边在我的电脑上删除。最后凌晨2点的时候我终于把自己电脑上的Popush删除干净了，到凌晨4点的时候终于宣告在新电脑上的尝试也以失败告终。&lt;/p&gt;

&lt;p&gt;这个问题最后的解决十分戏剧性，也具有指导意义。周六中午下课后我又在自己电脑上重复了一遍配置过程，npm安装的时候觉得非常困，于是就先去睡觉了，一下睡到了晚上6点。起来之后打开网页突然发现问题解决了。最后终于发现了问题所在：作业文档中要求替换mongojs和socket.io.js，我每次deploy之后都不厌其烦地按照作业要求替换了文件。但是问题是由于很多人没有注意到这个要求，在最新更新的版本中就把文件替换了，不需要自己再去替换。于是这个诡异的问题导致了我装了4个版本的Nginx和3个版本的Mongo DB，总计删除并重新部署Popush八次。最后由于睡觉醒后忘记了替换文件，终于解决了问题。这个经历也从侧面说明了充足的睡眠是多么的重要。&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Oct 2014 19:34:30 +0800</pubDate>
        <link>http://yourdomain.com/ubuntu/popush/2014/10/12/popush-in-ubuntu.html</link>
        <guid isPermaLink="true">http://yourdomain.com/ubuntu/popush/2014/10/12/popush-in-ubuntu.html</guid>
        
        
        <category>ubuntu</category>
        
        <category>popush</category>
        
      </item>
    
  </channel>
</rss>
